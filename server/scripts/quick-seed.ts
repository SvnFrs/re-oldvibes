#!/usr/bin/env bun

import mongoose from 'mongoose';
import bcrypt from 'bcrypt';
import { User } from '../schema/user.schema';
import { Vibe } from '../schema/vibe.schema';
import { Comment } from '../schema/comment.schema';

// Quick sample data
const quickUsers = [
  { name: 'Admin User', username: 'admin', email: 'admin@example.com', role: 'admin' },
  { name: 'Staff User', username: 'staff', email: 'staff@example.com', role: 'staff' },
  { name: 'Nguy·ªÖn VƒÉn An', username: 'nguyenvanan', email: 'user1@example.com', role: 'user' },
  { name: 'Tr·∫ßn Th·ªã B√¨nh', username: 'tranthibinh', email: 'user2@example.com', role: 'user' },
  { name: 'L√™ Minh C∆∞·ªùng', username: 'leminhcuong', email: 'user3@example.com', role: 'user' }
];

const quickItems = [
  {
    name: 'iPhone 13 Pro Max',
    description: 'ƒêi·ªán tho·∫°i iPhone 13 Pro Max 128GB, c√≤n b·∫£o h√†nh 8 th√°ng, m√°y ƒë·∫πp nh∆∞ m·ªõi',
    category: 'Electronics',
    price: 18500000,
    tags: ['iphone', 'apple', 'smartphone'],
    condition: 'like-new',
    location: 'H·ªì Ch√≠ Minh'
  },
  {
    name: 'MacBook Air M1',
    description: 'Laptop MacBook Air M1 8GB RAM, 256GB SSD, m√°y c√≤n b·∫£o h√†nh',
    category: 'Electronics',
    price: 22500000,
    tags: ['macbook', 'apple', 'laptop'],
    condition: 'good',
    location: 'H√† N·ªôi'
  },
  {
    name: '√Åo kho√°c jean nam',
    description: '√Åo kho√°c jean nam size L, m√†u xanh ƒë·∫≠m, ch·∫•t li·ªáu cotton cao c·∫•p',
    category: 'Fashion',
    price: 450000,
    tags: ['√°o kho√°c', 'jean', 'nam'],
    condition: 'new',
    location: 'ƒê√† N·∫µng'
  },
  {
    name: 'Xe ƒë·∫°p th·ªÉ thao',
    description: 'Xe ƒë·∫°p th·ªÉ thao 21 t·ªëc ƒë·ªô, khung nh√¥m, c√≤n m·ªõi 90%',
    category: 'Sports',
    price: 1800000,
    tags: ['xe ƒë·∫°p', 'th·ªÉ thao', '21 t·ªëc ƒë·ªô'],
    condition: 'good',
    location: 'H·∫£i Ph√≤ng'
  },
  {
    name: 'B√†n l√†m vi·ªác g·ªó',
    description: 'B√†n l√†m vi·ªác g·ªó s·ªìi, thi·∫øt k·∫ø hi·ªán ƒë·∫°i, k√≠ch th∆∞·ªõc 120x60cm',
    category: 'Home',
    price: 1200000,
    tags: ['b√†n', 'g·ªó', 'l√†m vi·ªác'],
    condition: 'like-new',
    location: 'C·∫ßn Th∆°'
  },
  {
    name: 'S√°ch "ƒê·∫Øc Nh√¢n T√¢m"',
    description: 'S√°ch ƒê·∫Øc Nh√¢n T√¢m b·∫£n ti·∫øng Vi·ªát, s√°ch c≈© nh∆∞ng c√≤n ƒë·∫πp',
    category: 'Books',
    price: 85000,
    tags: ['s√°ch', 'self-help', 'ƒë·∫Øc nh√¢n t√¢m'],
    condition: 'fair',
    location: 'Bi√™n H√≤a'
  }
];

const quickComments = [
  'S·∫£n ph·∫©m n√†y c√≤n m·ªõi kh√¥ng b·∫°n?',
  'Gi√° c√≥ th·ªÉ th∆∞∆°ng l∆∞·ª£ng ƒë∆∞·ª£c kh√¥ng?',
  'M√¨nh quan t√¢m, c√≥ th·ªÉ g·∫∑p xem h√†ng ƒë∆∞·ª£c kh√¥ng?',
  'S·∫£n ph·∫©m n√†y c√≤n b·∫£o h√†nh kh√¥ng?',
  'B·∫°n c√≥ ship kh√¥ng? Ph√≠ ship bao nhi√™u?'
];

const sampleImageUrl = 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=500&h=500&fit=crop';

async function connectDB() {
  try {
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/oldvibes';
    await mongoose.connect(mongoUri);
    console.log('‚úÖ Connected to MongoDB');
  } catch (error) {
    console.error('‚ùå MongoDB connection error:', error);
    process.exit(1);
  }
}

async function clearData() {
  try {
    await Promise.all([
      User.deleteMany({}),
      Vibe.deleteMany({}),
      Comment.deleteMany({})
    ]);
    console.log('üóëÔ∏è  Cleared existing data');
  } catch (error) {
    console.error('‚ùå Error clearing data:', error);
  }
}

async function createQuickData() {
  try {
    console.log('üå± Creating quick test data...');
    
    await connectDB();
    await clearData();
    
    // Create users
    const hashedPassword = await bcrypt.hash('123456', 10);
    const users = [];
    
    for (const userData of quickUsers) {
      const user = new User({
        ...userData,
        password: hashedPassword,
        bio: `Xin ch√†o! M√¨nh l√† ${userData.name}`,
        isVerified: true,
        isEmailVerified: true,
        isActive: true
      });
      users.push(user);
    }
    
    await User.insertMany(users);
    console.log(`üë• Created ${users.length} users`);
    
    // Create vibes
    const vibes = [];
    for (let i = 0; i < quickItems.length * 2; i++) {
      const item = quickItems[i % quickItems.length];
      const user = users[Math.floor(Math.random() * users.length)];
      
      const vibe = new Vibe({
        userId: user._id,
        itemName: item.name,
        description: item.description,
        price: item.price,
        tags: item.tags,
        mediaFiles: [{
          type: 'image',
          url: sampleImageUrl
        }],
        status: 'approved',
        category: item.category,
        condition: item.condition,
        location: item.location,
        likes: [],
        comments: [],
        commentsCount: 0,
        views: Math.floor(Math.random() * 100) + 10,
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours from now
      });
      
      vibes.push(vibe);
    }
    
    await Vibe.insertMany(vibes);
    console.log(`üì± Created ${vibes.length} vibes`);
    
    // Create comments
    const comments = [];
    for (const vibe of vibes) {
      const commentCount = Math.floor(Math.random() * 3) + 1; // 1-3 comments per vibe
      
      for (let i = 0; i < commentCount; i++) {
        const user = users[Math.floor(Math.random() * users.length)];
        const commentText = quickComments[Math.floor(Math.random() * quickComments.length)];
        
        const comment = new Comment({
          vibeId: vibe._id,
          userId: user._id,
          content: commentText,
          likesCount: Math.floor(Math.random() * 3),
          repliesCount: 0,
          likes: []
        });
        
        comments.push(comment);
      }
    }
    
    await Comment.insertMany(comments);
    console.log(`üí¨ Created ${comments.length} comments`);
    
    // Update vibes with interactions
    for (const vibe of vibes) {
      const vibeComments = comments.filter(c => c.vibeId.toString() === vibe._id.toString());
      const likeCount = Math.floor(Math.random() * 10) + 1;
      const likedUsers = [];
      
      for (let i = 0; i < likeCount && i < users.length; i++) {
        const randomUser = users[Math.floor(Math.random() * users.length)];
        if (!likedUsers.find(u => u.toString() === randomUser._id.toString())) {
          likedUsers.push(randomUser._id);
        }
      }
      
      await Vibe.findByIdAndUpdate(vibe._id, {
        likes: likedUsers,
        comments: vibeComments.map(c => c._id),
        commentsCount: vibeComments.length,
        likesCount: likedUsers.length
      });
    }
    
    console.log('‚úÖ Quick data seeding completed!');
    console.log(`üìä Summary:`);
    console.log(`   üë• Users: ${users.length}`);
    console.log(`   üì± Vibes: ${vibes.length}`);
    console.log(`   üí¨ Comments: ${comments.length}`);
    console.log('');
    console.log('üîê Test accounts:');
    console.log('   Admin: admin@example.com / 123456');
    console.log('   Staff: staff@example.com / 123456');
    console.log('   User: user1@example.com / 123456');
    
  } catch (error) {
    console.error('‚ùå Seeding error:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Disconnected from MongoDB');
    process.exit(0);
  }
}

createQuickData();
